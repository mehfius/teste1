import { createClient } from "https://esm.sh/@supabase/supabase-js@2.39.3";

/**
 * Script para verificar o status da conex√£o com o Supabase
 * e exibir informa√ß√µes sobre as tabelas rooms e logs.
 */
async function main() {
  console.log("Verificando conex√£o com o Supabase...");
  
  // Verificar vari√°veis de ambiente
  const supabaseUrl = Deno.env.get("SUPABASE_URL");
  const supabaseKey = Deno.env.get("SUPABASE_KEY");
  
  if (!supabaseUrl || !supabaseKey) {
    console.error("‚ùå Erro: SUPABASE_URL e SUPABASE_KEY s√£o necess√°rios.");
    console.log("Por favor, defina as vari√°veis de ambiente SUPABASE_URL e SUPABASE_KEY.");
    Deno.exit(1);
  }
  
  console.log("‚úÖ Vari√°veis de ambiente encontradas.");
  
  try {
    // Inicializar cliente do Supabase
    const supabase = createClient(supabaseUrl, supabaseKey);
    console.log("‚úÖ Cliente Supabase inicializado.");
    
    // Verificar conex√£o com a tabela rooms
    console.log("\nüìä Verificando tabela 'rooms'...");
    const { data: rooms, error: roomsError } = await supabase
      .from("rooms")
      .select("room_id, label")
      .limit(10);
    
    if (roomsError) {
      console.error(`‚ùå Erro ao acessar a tabela 'rooms': ${roomsError.message}`);
      console.log("‚ÑπÔ∏è A tabela 'rooms' deve existir previamente no banco de dados.");
    } else {
      console.log(`‚úÖ Tabela 'rooms' acessada com sucesso.`);
      console.log(`üìà Total de quartos encontrados: ${rooms.length}`);
      
      if (rooms.length > 0) {
        console.log("\nüè† Primeiros 10 quartos:");
        rooms.forEach((room, index) => {
          console.log(`  ${index + 1}. ID: ${room.room_id}, T√≠tulo: ${room.label || "(sem t√≠tulo)"}`);
        });
      }
    }
    
    // Verificar conex√£o com a tabela logs
    console.log("\nüìä Verificando tabela 'logs'...");
    const { data: logs, error: logsError } = await supabase
      .from("logs")
      .select("*")
      .order("created_at", { ascending: false })
      .limit(5);
    
    if (logsError) {
      console.error(`‚ùå Erro ao acessar a tabela 'logs': ${logsError.message}`);
      console.log("‚ÑπÔ∏è A tabela 'logs' deve existir previamente no banco de dados.");
    } else {
      console.log(`‚úÖ Tabela 'logs' acessada com sucesso.`);
      
      if (logs && logs.length > 0) {
        console.log(`üìà √öltimas ${logs.length} execu√ß√µes registradas:`);
        logs.forEach((log, index) => {
          const date = new Date(log.created_at).toLocaleString();
          console.log(`  ${index + 1}. Data: ${date}`);
          console.log(`     Tempo de execu√ß√£o: ${log.service_time} segundos`);
          console.log(`     Processados: ${log.success_count}/${log.total_count} quartos`);
          console.log(`     IDs: ${log.room_ids.join(", ")}`);
        });
      } else {
        console.log("‚ÑπÔ∏è Nenhum log de execu√ß√£o encontrado.");
      }
    }
    
    console.log("\n‚úÖ Verifica√ß√£o do Supabase conclu√≠da!");
    
  } catch (error) {
    console.error(`‚ùå Erro ao conectar ao Supabase: ${error.message}`);
    Deno.exit(1);
  }
}

// Executar apenas quando chamado diretamente
if (import.meta.main) {
  await main();
}